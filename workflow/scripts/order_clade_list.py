import os
import sys
import argparse
import math
import functools
import time
import collections
import re

def rank_species_average_abundance(file, id_index=-1, only_species=True):
    """ Read in a taxonomy file, and sort species by average abundance
    
    Args:
        file (string): The path to the merged taxonomy file generated by MetaPhlAn
    
    Requires:
        None
    
    Returns:
        (list): A list of species ordered by decreasing average abundance
    """
    
    def try_format_data(value):
        """ Try to format the data in a file """
        try:
            value = float(value)
        except ValueError:
            value= 0
        
        return value
    
    species=collections.OrderedDict()
    with open(file) as file_handle:
        try:
            column_names = file_handle.readline().rstrip().split("\t")[1:]
        except IndexError:
            column_names = []
        for line in file_handle:
            line=line.rstrip().split("\t")
            taxonomy=line.pop(0).split("|")[id_index]
            data=[try_format_data(i) for i in line]
            try:
                average=sum(data)/(len(data)*1.0)
            except ZeroDivisionError:
                average=0
            # only store values for species
            if only_species:
                if taxonomy.startswith("s__"):
                    species[taxonomy]=average
            else:
                species[taxonomy]=average
    
    # sort the species from highest to lowest average abundance
    sorted_species = sorted(species, key=species.get, reverse=True)
    # if abundances are not provided then use original ordering
    if sum(species.values()) == 0:
        sorted_species = list(species.keys())
    
    return sorted_species

def parse_arguments(args):
    """
    Parse the arguments from the user
    """
    parser = argparse.ArgumentParser(
        description= "Find the top species by average abundance. \n",
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        "-a", "--abundance",
        help="the merged relative abundance taxonomic abundance file\n[REQUIRED]",
        metavar="<merged_metaphlan.relab.tsv>",
        required=True)
    parser.add_argument(
        "-c", "--clade",
        help="the clade list from the STDOUT of strainphlan in --print_clades_only mode\n[REQUIRED]",
        metavar="<clade_list.txt>",
        required=True)
    parser.add_argument(
        "-o", "--output",
        help="Output file containing ordered list of clades\n[REQUIRED]",
        metavar="<clades_list_order_by_average_abundance.txt>",
        required=True)
    
    return parser.parse_args()

def main():
    args=parse_arguments(sys)
    
    # get the species listed by average abundance
    species_ranked = rank_species_average_abundance(args.abundance)
    
    # read in the clade list
    clades=set()
    with open(args.clade) as file_handle:
        for line in file_handle:
            if "s__" in line:
                clades.add(line.strip().split("\t")[1].split(": in ")[0])
    
    # write out ordered species also included in clade list
    with open(args.output,"w") as file_handle:
        for taxon in species_ranked:
            if taxon in clades:
                file_handle.write(taxon+"\n")
    file_handle.close()

if __name__ == "__main__":
    main()
